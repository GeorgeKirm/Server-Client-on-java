/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servernt;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import message.Email;

/**
 * GUI for the server, can save emails and see them on panel.
 *
 * @author Gewrgios Kirmitsakis
 */
public class ServersGUI extends javax.swing.JFrame {

    private static ServerNT server;
    private static volatile boolean chicker = true;
    private static int port = -1;

    /**
     * Creates new form ServersGUI
     */
    public ServersGUI() {
        initComponents();
        saveB.setEnabled(false);
        quitB.setEnabled(false);
        showMailsB.setEnabled(false);
        mailFieldT.setText("Welcome to server\n");
        mailFieldT.append("Please insert port that the server\nwill listen and press accept\n");
        mailFieldT.append("Ports are between 2000 and 8000");
        server = new ServerNT(); //Fuctions of the server class (ServerNT)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        saveB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mailFieldT = new javax.swing.JTextArea();
        quitB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        showMailsB = new javax.swing.JButton();
        acceptPortB = new javax.swing.JButton();
        portFieldT = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveB.setText("Save Emails");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        mailFieldT.setEditable(false);
        mailFieldT.setColumns(20);
        mailFieldT.setRows(5);
        jScrollPane1.setViewportView(mailFieldT);

        quitB.setText("Close Server");
        quitB.setMaximumSize(new java.awt.Dimension(91, 29));
        quitB.setMinimumSize(new java.awt.Dimension(91, 29));
        quitB.setPreferredSize(new java.awt.Dimension(91, 29));
        quitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBActionPerformed(evt);
            }
        });

        jLabel2.setText("Server");

        jLabel3.setText("port:");

        showMailsB.setText("Show mails");
        showMailsB.setMaximumSize(new java.awt.Dimension(91, 29));
        showMailsB.setMinimumSize(new java.awt.Dimension(91, 29));
        showMailsB.setPreferredSize(new java.awt.Dimension(91, 29));
        showMailsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMailsBActionPerformed(evt);
            }
        });

        acceptPortB.setText("accept");
        acceptPortB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptPortBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(saveB, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quitB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showMailsB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portFieldT, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptPortB)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(acceptPortB)
                    .addComponent(portFieldT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveB)
                    .addComponent(quitB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showMailsB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Calls the function to write the files to the system.
     *
     * @param evt
     */
    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        ServerNT.writeFilesNewWay();
    }//GEN-LAST:event_saveBActionPerformed

    /**
     * Asks the user if he wants to save the files before closing the server.
     *
     * @param evt
     */
    private void quitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBActionPerformed
        Object[] options = {"CANCEL", "NO", "YES"};
        int i = JOptionPane.showOptionDialog(null, "Do you want to Save new emails?", "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        switch (i) {
            case 0: //nothing
                break;
            case 2:
                saveBActionPerformed(evt); //saves and closes (has no break and run case 1)
            case 1:
                server.closeServer(); //closes
                server = new ServerNT();
                break;
        }
    }//GEN-LAST:event_quitBActionPerformed

    /**
     * Gets the data with the mails and prints them to the text area.
     *
     * @param evt
     */
    private void showMailsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMailsBActionPerformed
        HashMap<String, List<Email>> map = server.showMails(); //get hashmap
        mailFieldT.setText("Welcome to server\n");
        for (Map.Entry<String, List<Email>> entry : map.entrySet()) { //shows it
            mailFieldT.append("~~~~~~~~~~~~~~~~\n");
            mailFieldT.append("User:\t" + entry.getKey() + "\n\n");
            for (Email mailT : entry.getValue()) {
                mailFieldT.append("Senter:\t" + mailT.senterGetter() + "\n");
                mailFieldT.append("Reciever:\t" + mailT.recieverGetter() + "\n");
                mailFieldT.append("Was read:\t" + mailT.isNewSGetter() + "\n");
                mailFieldT.append("Subject:\t" + mailT.subjectGetter() + "\n");
                mailFieldT.append("Main body:\t" + mailT.mainBodyGetter() + "\n\n");
            }
        }
    }//GEN-LAST:event_showMailsBActionPerformed

    /**
     * Checks if the port given to the port text field is acceptable and if it
     * is, the other features of the UI is enabled.
     *
     * @param evt
     */
    private void acceptPortBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptPortBActionPerformed
        if (portFieldT.getText() != null) {
            if (!"".equals(portFieldT.getText())) {
                try {
                    port = Integer.parseInt(portFieldT.getText());
                    if (port >= 2000 && port <= 8000) {
                        mailFieldT.setText("Welcome to server\n");
                        mailFieldT.append("Server is up\n");
                        acceptPortB.setEnabled(false);
                        chicker = false; // stops the server from opening the client before GUI is completly loaded
                        saveB.setEnabled(true);
                        quitB.setEnabled(true);
                        showMailsB.setEnabled(true);
                        portFieldT.setEditable(false);
                    } else {
                        mailFieldT.setText("Welcome to server\n");
                        mailFieldT.append("Please insert port that the server\nwill listen and press accept\n");
                        mailFieldT.append("This port is not allowed, please try agien\n");
                        mailFieldT.append("Ports are between 2000 and 8000");
                    }
                } catch (Exception e) {
                    mailFieldT.setText("Welcome to server\n");
                    mailFieldT.append("Please insert port that the server\nwill listen and press accept\n");
                    mailFieldT.append("This port is not allowed, please try agien\n");
                    mailFieldT.append("Ports are between 2000 and 8000");
                }

            }
        }
    }//GEN-LAST:event_acceptPortBActionPerformed

    /**
     * Starts the GUI in the thread and when the port is accepted calls the
     * server class.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServersGUI().setVisible(true);
            }
        });
        while (chicker) { // we need to get the port from the user first
        }
        ServerNT.mainLoop(port);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptPortB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mailFieldT;
    private javax.swing.JTextField portFieldT;
    private javax.swing.JButton quitB;
    private javax.swing.JButton saveB;
    private javax.swing.JButton showMailsB;
    // End of variables declaration//GEN-END:variables
}
